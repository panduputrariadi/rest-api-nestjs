generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Author {
  id        String   @id @default(uuid())
  name      String
  biography String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Book {
  id          String   @id @default(uuid())
  title       String
  description String?
  price       Float
  stock       Int      @default(0)
  categoryId  String
  authorId    String
  weight      Float
  height      Float
  width       Float
  totalPages  Int
  publisher   String
  publishedAt DateTime
  language    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  Category     @relation(fields: [categoryId], references: [id])
  author    Author       @relation(fields: [authorId], references: [id])
  Genres    BookGenres[]
  imageBook ImageBook[]
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Book BookGenres[]
}

model BookGenres {
  bookId    String
  genreId   String
  createdAt DateTime @default(now())

  book  Book  @relation(fields: [bookId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@id([bookId, genreId])
}

model ImageBook {
  id        String   @id @default(uuid())
  url       String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id])

  @@index([bookId])
}
